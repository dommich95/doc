/* tslint:disable */
/* eslint-disable */
/**
 * Doctors API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiDoctorsGet200Response,
  Doctor,
} from '../models/index';
import {
    ApiDoctorsGet200ResponseFromJSON,
    ApiDoctorsGet200ResponseToJSON,
    DoctorFromJSON,
    DoctorToJSON,
} from '../models/index';

export interface ApiDoctorsGetRequest {
    page?: number;
}

export interface ApiDoctorsIdDeleteRequest {
    id: number;
}

export interface ApiDoctorsIdPutRequest {
    id: number;
    doctor: Doctor;
}

export interface ApiDoctorsPostRequest {
    doctor: Doctor;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get a list of doctors
     */
    async apiDoctorsGetRaw(requestParameters: ApiDoctorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiDoctorsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiDoctorsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of doctors
     */
    async apiDoctorsGet(requestParameters: ApiDoctorsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiDoctorsGet200Response> {
        const response = await this.apiDoctorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a doctor
     */
    async apiDoctorsIdDeleteRaw(requestParameters: ApiDoctorsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDoctorsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a doctor
     */
    async apiDoctorsIdDelete(requestParameters: ApiDoctorsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDoctorsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update a doctor
     */
    async apiDoctorsIdPutRaw(requestParameters: ApiDoctorsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Doctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiDoctorsIdPut.');
        }

        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling apiDoctorsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DoctorToJSON(requestParameters.doctor),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoctorFromJSON(jsonValue));
    }

    /**
     * Update a doctor
     */
    async apiDoctorsIdPut(requestParameters: ApiDoctorsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Doctor> {
        const response = await this.apiDoctorsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new doctor
     */
    async apiDoctorsPostRaw(requestParameters: ApiDoctorsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Doctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling apiDoctorsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DoctorToJSON(requestParameters.doctor),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoctorFromJSON(jsonValue));
    }

    /**
     * Add a new doctor
     */
    async apiDoctorsPost(requestParameters: ApiDoctorsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Doctor> {
        const response = await this.apiDoctorsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
